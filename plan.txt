#### Here are the remaining things I need to do to finalise the project:

CODE

# Wandb logging

- Add wandb logging to the pipeline.                                                    DONE
- Fix the fact that the table logging breaks the pipeline logging.                      DONE 
- Generate pipeline visualisation which I can log to wandb.                             DONE 

# General cleanup

- Add the ability to run folders and create folders                                     DONE 
- Regular logging
- If debugging message is a missing file, it want juman intervention to say "I've added the file"
- Fix the debugging so human input actually works.                                                    
- Add more comments and docstrings, make sure everything is clear.
- Example pipelines  -- almost there
- Fix realist issues.                                                                   DONE 
- Issues with structuring of system prompt. Additional user input issues.               DONE 
- Each module should have the the original query specified separately in system prompt. DONE
- Control temperature from pipeline file (only if specified).                           DONE
- Control model used from pipeline file (only if specified, else use default gpt-4).    DONE

#Â Documentation

- README reflective of the project, section for pre-built pipelines vs how to build your own.
- Demo video(s) and gifs.
- Example pipeline creation.
- Tracking token usage???? - just write about it 
- Update requirements.txt


# Report

- Add a cool gif at the beginning
- Discuss cost.
- Finish the article.
- talk about the fact the modular system means easy to construct and maintain.
- decomposable parts means less memory problems.
- pipeline means you can start from an exisiting repository.
- self building options.
- write the Future section.
- Add references to article

CHANGES

Provide an update README that is extremely comprehensive of how the project works. Things that the current README says which need to be extended/altered/changed are.x

config.py
-- Explain this file and that it is how you set open AI key and default model parameters, choose the pipeline your agent will run, and whether you will include wandb logging for the agent.

pipelines 
- Pipelines are now in a folder called pipelines. This allows you to create multiple for different tasks. Use config to specify the one the agent runs.
- You can specify model_config in the pipeline. This allows you to control the openai settings on a per module basis, demonstrate an example of doing this. For example, easier tasks might want gpt-3.5-turbo, or more creative tasks might need higher temperature.
- explain the concept of the supplement:

chameleon module
Instead of having multiple duplicated modules, we now have a standard AI call module called the chameleon. This is invoked when a system prompt exists for the model but no additional function does. THis means that to create a new basic module, i.e a call to an LLM with a custom systme prompt is as simple as creating the prompt in the system_prompts folder and adding it to the pipeline

Other more complex modules are still in the module section.


wandb_logging.py
-- Explain the wandb process, where agent.py creates an Agent trace, where agents are the parents of pipelines. Each pipeline can invoke multiple modules, logged within the chain as LLMs and tools
-- Wandb logging takes place in the modules.py file, where each module has logging included if wandb is enabled.

Look through all the code and compare it to the README. Anything no longer true should be update to reflect the new state of the project. Provide the raw markdown don't actually duspaly it.
 @ai.py  @wandb_logging.py  @agent.py  @orchestrate.py  @modules.py @config.yml @engineering_pipeline.yml @helpers.py 